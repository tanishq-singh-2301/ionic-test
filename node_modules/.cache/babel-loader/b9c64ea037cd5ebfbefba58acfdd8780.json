{"ast":null,"code":"import _toConsumableArray from \"/home/tanishq-singh-2301/hello/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/*\n Stencil Client Platform v2.16.1 | MIT Licensed | https://stenciljs.com\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = function safeSelector(selector) {\n  var placeholders = [];\n  var index = 0; // Replaces attribute selectors with placeholders.\n  // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n\n  selector = selector.replace(/(\\[[^\\]]*\\])/g, function (_, keep) {\n    var replaceBy = \"__ph-\".concat(index, \"__\");\n    placeholders.push(keep);\n    index++;\n    return replaceBy;\n  }); // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n  // WS and \"+\" would otherwise be interpreted as selector separators.\n\n  var content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n    var replaceBy = \"__ph-\".concat(index, \"__\");\n    placeholders.push(exp);\n    index++;\n    return pseudo + replaceBy;\n  });\n  var ss = {\n    content: content,\n    placeholders: placeholders\n  };\n  return ss;\n};\n\nvar restoreSafeSelector = function restoreSafeSelector(placeholders, content) {\n  return content.replace(/__ph-(\\d+)__/g, function (_, index) {\n    return placeholders[+index];\n  });\n};\n\nvar _polyfillHost = '-shadowcsshost';\nvar _polyfillSlotted = '-shadowcssslotted'; // note: :host-context pre-processed to -shadowcsshostcontext.\n\nvar _polyfillHostContext = '-shadowcsscontext';\n\nvar _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\n\nvar _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\n\nvar _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\n\nvar _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\n\nvar _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\n\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar _colonHostRe = /:host/gim;\nvar _colonSlottedRe = /::slotted/gim;\nvar _colonHostContextRe = /:host-context/gim;\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\n\nvar stripComments = function stripComments(input) {\n  return input.replace(_commentRe, '');\n};\n\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\n\nvar extractCommentsWithHash = function extractCommentsWithHash(input) {\n  return input.match(_commentWithHashRe) || [];\n};\n\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nvar OPEN_CURLY = '{';\nvar CLOSE_CURLY = '}';\nvar BLOCK_PLACEHOLDER = '%BLOCK%';\n\nvar processRules = function processRules(input, ruleCallback) {\n  var inputWithEscapedBlocks = escapeBlocks(input);\n  var nextBlockIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n    var selector = arguments.length <= 2 ? undefined : arguments[2];\n    var content = '';\n    var suffix = arguments.length <= 4 ? undefined : arguments[4];\n    var contentPrefix = '';\n\n    if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = '{';\n    }\n\n    var cssRule = {\n      selector: selector,\n      content: content\n    };\n    var rule = ruleCallback(cssRule);\n    return \"\".concat(arguments.length <= 1 ? undefined : arguments[1]).concat(rule.selector).concat(arguments.length <= 3 ? undefined : arguments[3]).concat(contentPrefix).concat(rule.content).concat(suffix);\n  });\n};\n\nvar escapeBlocks = function escapeBlocks(input) {\n  var inputParts = input.split(_curlyRe);\n  var resultParts = [];\n  var escapedBlocks = [];\n  var bracketCount = 0;\n  var currentBlockParts = [];\n\n  for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {\n    var part = inputParts[partIndex];\n\n    if (part === CLOSE_CURLY) {\n      bracketCount--;\n    }\n\n    if (bracketCount > 0) {\n      currentBlockParts.push(part);\n    } else {\n      if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n        currentBlockParts = [];\n      }\n\n      resultParts.push(part);\n    }\n\n    if (part === OPEN_CURLY) {\n      bracketCount++;\n    }\n  }\n\n  if (currentBlockParts.length > 0) {\n    escapedBlocks.push(currentBlockParts.join(''));\n    resultParts.push(BLOCK_PLACEHOLDER);\n  }\n\n  var strEscapedBlocks = {\n    escapedString: resultParts.join(''),\n    blocks: escapedBlocks\n  };\n  return strEscapedBlocks;\n};\n\nvar insertPolyfillHostInCssText = function insertPolyfillHostInCssText(selector) {\n  selector = selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost).replace(_colonSlottedRe, _polyfillSlotted);\n  return selector;\n};\n\nvar convertColonRule = function convertColonRule(cssText, regExp, partReplacer) {\n  // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n  return cssText.replace(regExp, function () {\n    for (var _len = arguments.length, m = new Array(_len), _key = 0; _key < _len; _key++) {\n      m[_key] = arguments[_key];\n    }\n\n    if (m[2]) {\n      var parts = m[2].split(',');\n      var r = [];\n\n      for (var i = 0; i < parts.length; i++) {\n        var p = parts[i].trim();\n        if (!p) break;\n        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n      }\n\n      return r.join(',');\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n};\n\nvar colonHostPartReplacer = function colonHostPartReplacer(host, part, suffix) {\n  return host + part.replace(_polyfillHost, '') + suffix;\n};\n\nvar convertColonHost = function convertColonHost(cssText) {\n  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\n\nvar colonHostContextPartReplacer = function colonHostContextPartReplacer(host, part, suffix) {\n  if (part.indexOf(_polyfillHost) > -1) {\n    return colonHostPartReplacer(host, part, suffix);\n  } else {\n    return host + part + suffix + ', ' + part + ' ' + host + suffix;\n  }\n};\n\nvar convertColonSlotted = function convertColonSlotted(cssText, slotScopeId) {\n  var slotClass = '.' + slotScopeId + ' > ';\n  var selectors = [];\n  cssText = cssText.replace(_cssColonSlottedRe, function () {\n    for (var _len2 = arguments.length, m = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      m[_key2] = arguments[_key2];\n    }\n\n    if (m[2]) {\n      var compound = m[2].trim();\n      var suffix = m[3];\n      var slottedSelector = slotClass + compound + suffix;\n      var prefixSelector = '';\n\n      for (var i = m[4] - 1; i >= 0; i--) {\n        var char = m[5][i];\n\n        if (char === '}' || char === ',') {\n          break;\n        }\n\n        prefixSelector = char + prefixSelector;\n      }\n\n      var orgSelector = prefixSelector + slottedSelector;\n      var addedSelector = \"\".concat(prefixSelector.trimRight()).concat(slottedSelector.trim());\n\n      if (orgSelector.trim() !== addedSelector.trim()) {\n        var updatedSelector = \"\".concat(addedSelector, \", \").concat(orgSelector);\n        selectors.push({\n          orgSelector: orgSelector,\n          updatedSelector: updatedSelector\n        });\n      }\n\n      return slottedSelector;\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n  return {\n    selectors: selectors,\n    cssText: cssText\n  };\n};\n\nvar convertColonHostContext = function convertColonHostContext(cssText) {\n  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\n\nvar convertShadowDOMSelectors = function convertShadowDOMSelectors(cssText) {\n  return _shadowDOMSelectorsRe.reduce(function (result, pattern) {\n    return result.replace(pattern, ' ');\n  }, cssText);\n};\n\nvar makeScopeMatcher = function makeScopeMatcher(scopeSelector) {\n  var lre = /\\[/g;\n  var rre = /\\]/g;\n  scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n  return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\n\nvar selectorNeedsScoping = function selectorNeedsScoping(selector, scopeSelector) {\n  var re = makeScopeMatcher(scopeSelector);\n  return !re.test(selector);\n};\n\nvar injectScopingSelector = function injectScopingSelector(selector, scopingSelector) {\n  return selector.replace(_selectorPartsRe, function (_) {\n    var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    var _colonGroup = arguments.length > 2 ? arguments[2] : undefined;\n\n    var colon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n    var after = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n    return before + scopingSelector + colon + after;\n  });\n};\n\nvar applySimpleSelectorScope = function applySimpleSelectorScope(selector, scopeSelector, hostSelector) {\n  // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n  _polyfillHostRe.lastIndex = 0;\n\n  if (_polyfillHostRe.test(selector)) {\n    var replaceBy = \".\".concat(hostSelector);\n    return selector.replace(_polyfillHostNoCombinatorRe, function (_, selector) {\n      return injectScopingSelector(selector, replaceBy);\n    }).replace(_polyfillHostRe, replaceBy + ' ');\n  }\n\n  return scopeSelector + ' ' + selector;\n};\n\nvar applyStrictSelectorScope = function applyStrictSelectorScope(selector, scopeSelector, hostSelector) {\n  var isRe = /\\[is=([^\\]]*)\\]/g;\n  scopeSelector = scopeSelector.replace(isRe, function (_) {\n    return arguments.length <= 1 ? undefined : arguments[1];\n  });\n  var className = '.' + scopeSelector;\n\n  var _scopeSelectorPart = function _scopeSelectorPart(p) {\n    var scopedP = p.trim();\n\n    if (!scopedP) {\n      return '';\n    }\n\n    if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n      scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n    } else {\n      // remove :host since it should be unnecessary\n      var t = p.replace(_polyfillHostRe, '');\n\n      if (t.length > 0) {\n        scopedP = injectScopingSelector(t, className);\n      }\n    }\n\n    return scopedP;\n  };\n\n  var safeContent = safeSelector(selector);\n  selector = safeContent.content;\n  var scopedSelector = '';\n  var startIndex = 0;\n  var res;\n  var sep = /( |>|\\+|~(?!=))\\s*/g; // If a selector appears before :host it should not be shimmed as it\n  // matches on ancestor elements and not on elements in the host's shadow\n  // `:host-context(div)` is transformed to\n  // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n  // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n  // Historically `component-tag:host` was matching the component so we also want to preserve\n  // this behavior to avoid breaking legacy apps (it should not match).\n  // The behavior should be:\n  // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n  // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n  //   `:host-context(tag)`)\n\n  var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1; // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n\n  var shouldScope = !hasHost;\n\n  while ((res = sep.exec(selector)) !== null) {\n    var separator = res[1];\n\n    var _part = selector.slice(startIndex, res.index).trim();\n\n    shouldScope = shouldScope || _part.indexOf(_polyfillHostNoCombinator) > -1;\n    var scopedPart = shouldScope ? _scopeSelectorPart(_part) : _part;\n    scopedSelector += \"\".concat(scopedPart, \" \").concat(separator, \" \");\n    startIndex = sep.lastIndex;\n  }\n\n  var part = selector.substring(startIndex);\n  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part; // replace the placeholders with their original values\n\n  return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\n\nvar scopeSelector = function scopeSelector(selector, scopeSelectorText, hostSelector, slotSelector) {\n  return selector.split(',').map(function (shallowPart) {\n    if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n      return shallowPart.trim();\n    }\n\n    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n    } else {\n      return shallowPart.trim();\n    }\n  }).join(', ');\n};\n\nvar scopeSelectors = function scopeSelectors(cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) {\n  return processRules(cssText, function (rule) {\n    var selector = rule.selector;\n    var content = rule.content;\n\n    if (rule.selector[0] !== '@') {\n      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n    } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n    }\n\n    var cssRule = {\n      selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n      content: content\n    };\n    return cssRule;\n  });\n};\n\nvar scopeCssText = function scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n  cssText = insertPolyfillHostInCssText(cssText);\n  cssText = convertColonHost(cssText);\n  cssText = convertColonHostContext(cssText);\n  var slotted = convertColonSlotted(cssText, slotScopeId);\n  cssText = slotted.cssText;\n  cssText = convertShadowDOMSelectors(cssText);\n\n  if (scopeId) {\n    cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n  }\n\n  cssText = cssText.replace(/-shadowcsshost-no-combinator/g, \".\".concat(hostScopeId));\n  cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n  return {\n    cssText: cssText.trim(),\n    slottedSelectors: slotted.selectors\n  };\n};\n\nvar scopeCss = function scopeCss(cssText, scopeId, commentOriginalSelector) {\n  var hostScopeId = scopeId + '-h';\n  var slotScopeId = scopeId + '-s';\n  var commentsWithHash = extractCommentsWithHash(cssText);\n  cssText = stripComments(cssText);\n  var orgSelectors = [];\n\n  if (commentOriginalSelector) {\n    var processCommentedSelector = function processCommentedSelector(rule) {\n      var placeholder = \"/*!@___\".concat(orgSelectors.length, \"___*/\");\n      var comment = \"/*!@\".concat(rule.selector, \"*/\");\n      orgSelectors.push({\n        placeholder: placeholder,\n        comment: comment\n      });\n      rule.selector = placeholder + rule.selector;\n      return rule;\n    };\n\n    cssText = processRules(cssText, function (rule) {\n      if (rule.selector[0] !== '@') {\n        return processCommentedSelector(rule);\n      } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n        rule.content = processRules(rule.content, processCommentedSelector);\n        return rule;\n      }\n\n      return rule;\n    });\n  }\n\n  var scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n  cssText = [scoped.cssText].concat(_toConsumableArray(commentsWithHash)).join('\\n');\n\n  if (commentOriginalSelector) {\n    orgSelectors.forEach(function (_ref) {\n      var placeholder = _ref.placeholder,\n          comment = _ref.comment;\n      cssText = cssText.replace(placeholder, comment);\n    });\n  }\n\n  scoped.slottedSelectors.forEach(function (slottedSelector) {\n    cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n  });\n  return cssText;\n};\n\nexport { scopeCss };","map":{"version":3,"names":["safeSelector","selector","placeholders","index","replace","_","keep","replaceBy","push","content","pseudo","exp","ss","restoreSafeSelector","_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_selectorReSuffix","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","stripComments","input","_commentWithHashRe","extractCommentsWithHash","match","_ruleRe","_curlyRe","_selectorPartsRe","OPEN_CURLY","CLOSE_CURLY","BLOCK_PLACEHOLDER","processRules","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","suffix","contentPrefix","startsWith","blocks","substring","length","cssRule","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","join","strEscapedBlocks","insertPolyfillHostInCssText","convertColonRule","cssText","regExp","partReplacer","m","parts","r","i","p","trim","colonHostPartReplacer","host","convertColonHost","colonHostContextPartReplacer","indexOf","convertColonSlotted","slotScopeId","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","convertColonHostContext","convertShadowDOMSelectors","reduce","result","pattern","makeScopeMatcher","scopeSelector","lre","rre","selectorNeedsScoping","re","test","injectScopingSelector","scopingSelector","before","_colonGroup","colon","after","applySimpleSelectorScope","hostSelector","lastIndex","applyStrictSelectorScope","isRe","className","_scopeSelectorPart","scopedP","t","safeContent","scopedSelector","startIndex","res","sep","hasHost","shouldScope","exec","separator","slice","scopedPart","scopeSelectorText","slotSelector","map","shallowPart","scopeSelectors","commentOriginalSelector","scopeCssText","scopeId","hostScopeId","slotted","slottedSelectors","scopeCss","commentsWithHash","orgSelectors","processCommentedSelector","placeholder","comment","scoped","forEach"],"sources":["/home/tanishq-singh-2301/hello/node_modules/@ionic/core/node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["/*\n Stencil Client Platform v2.16.1 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content,\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\nconst insertPolyfillHostInCssText = (selector) => {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n    const slotClass = '.' + slotScopeId + ' > ';\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = '';\n            for (let i = m[4] - 1; i >= 0; i--) {\n                const char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = prefixSelector + slottedSelector;\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText,\n    };\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst injectScopingSelector = (selector, scopingSelector) => {\n    return selector.replace(_selectorPartsRe, (_, before = '', _colonGroup, colon = '', after = '') => {\n        return before + scopingSelector + colon + after;\n    });\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => injectScopingSelector(selector, replaceBy))\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                scopedP = injectScopingSelector(t, className);\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector\n        .split(',')\n        .map((shallowPart) => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') ||\n            rule.selector.startsWith('@supports') ||\n            rule.selector.startsWith('@page') ||\n            rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content,\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, (rule) => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') ||\n                rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') ||\n                rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach((slottedSelector) => {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\nexport { scopeCss };\n"],"mappings":";;AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAc;EAC/B,IAAMC,YAAY,GAAG,EAArB;EACA,IAAIC,KAAK,GAAG,CAAZ,CAF+B,CAG/B;EACA;;EACAF,QAAQ,GAAGA,QAAQ,CAACG,OAAT,CAAiB,eAAjB,EAAkC,UAACC,CAAD,EAAIC,IAAJ,EAAa;IACtD,IAAMC,SAAS,kBAAWJ,KAAX,OAAf;IACAD,YAAY,CAACM,IAAb,CAAkBF,IAAlB;IACAH,KAAK;IACL,OAAOI,SAAP;EACH,CALU,CAAX,CAL+B,CAW/B;EACA;;EACA,IAAME,OAAO,GAAGR,QAAQ,CAACG,OAAT,CAAiB,2BAAjB,EAA8C,UAACC,CAAD,EAAIK,MAAJ,EAAYC,GAAZ,EAAoB;IAC9E,IAAMJ,SAAS,kBAAWJ,KAAX,OAAf;IACAD,YAAY,CAACM,IAAb,CAAkBG,GAAlB;IACAR,KAAK;IACL,OAAOO,MAAM,GAAGH,SAAhB;EACH,CALe,CAAhB;EAMA,IAAMK,EAAE,GAAG;IACPH,OAAO,EAAPA,OADO;IAEPP,YAAY,EAAZA;EAFO,CAAX;EAIA,OAAOU,EAAP;AACH,CAxBD;;AAyBA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACX,YAAD,EAAeO,OAAf,EAA2B;EACnD,OAAOA,OAAO,CAACL,OAAR,CAAgB,eAAhB,EAAiC,UAACC,CAAD,EAAIF,KAAJ;IAAA,OAAcD,YAAY,CAAC,CAACC,KAAF,CAA1B;EAAA,CAAjC,CAAP;AACH,CAFD;;AAGA,IAAMW,aAAa,GAAG,gBAAtB;AACA,IAAMC,gBAAgB,GAAG,mBAAzB,C,CACA;;AACA,IAAMC,oBAAoB,GAAG,mBAA7B;;AACA,IAAMC,YAAY,GAAG,aAAa,2BAAb,GAA2C,gBAAhE;;AACA,IAAMC,eAAe,GAAG,IAAIC,MAAJ,CAAW,MAAML,aAAN,GAAsBG,YAAjC,EAA+C,KAA/C,CAAxB;;AACA,IAAMG,sBAAsB,GAAG,IAAID,MAAJ,CAAW,MAAMH,oBAAN,GAA6BC,YAAxC,EAAsD,KAAtD,CAA/B;;AACA,IAAMI,kBAAkB,GAAG,IAAIF,MAAJ,CAAW,MAAMJ,gBAAN,GAAyBE,YAApC,EAAkD,KAAlD,CAA3B;;AACA,IAAMK,yBAAyB,GAAGR,aAAa,GAAG,gBAAlD;;AACA,IAAMS,2BAA2B,GAAG,sCAApC;AACA,IAAMC,qBAAqB,GAAG,CAAC,WAAD,EAAc,YAAd,CAA9B;AACA,IAAMC,iBAAiB,GAAG,4BAA1B;AACA,IAAMC,eAAe,GAAG,mBAAxB;AACA,IAAMC,YAAY,GAAG,UAArB;AACA,IAAMC,eAAe,GAAG,cAAxB;AACA,IAAMC,mBAAmB,GAAG,kBAA5B;AACA,IAAMC,UAAU,GAAG,sBAAnB;;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;EAC7B,OAAOA,KAAK,CAAC5B,OAAN,CAAc0B,UAAd,EAA0B,EAA1B,CAAP;AACH,CAFD;;AAGA,IAAMG,kBAAkB,GAAG,8CAA3B;;AACA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACF,KAAD,EAAW;EACvC,OAAOA,KAAK,CAACG,KAAN,CAAYF,kBAAZ,KAAmC,EAA1C;AACH,CAFD;;AAGA,IAAMG,OAAO,GAAG,uDAAhB;AACA,IAAMC,QAAQ,GAAG,SAAjB;AACA,IAAMC,gBAAgB,GAAG,2BAAzB;AACA,IAAMC,UAAU,GAAG,GAAnB;AACA,IAAMC,WAAW,GAAG,GAApB;AACA,IAAMC,iBAAiB,GAAG,SAA1B;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACV,KAAD,EAAQW,YAAR,EAAyB;EAC1C,IAAMC,sBAAsB,GAAGC,YAAY,CAACb,KAAD,CAA3C;EACA,IAAIc,cAAc,GAAG,CAArB;EACA,OAAOF,sBAAsB,CAACG,aAAvB,CAAqC3C,OAArC,CAA6CgC,OAA7C,EAAsD,YAAU;IACnE,IAAMnC,QAAQ,mDAAd;IACA,IAAIQ,OAAO,GAAG,EAAd;IACA,IAAIuC,MAAM,mDAAV;IACA,IAAIC,aAAa,GAAG,EAApB;;IACA,IAAID,MAAM,IAAIA,MAAM,CAACE,UAAP,CAAkB,MAAMT,iBAAxB,CAAd,EAA0D;MACtDhC,OAAO,GAAGmC,sBAAsB,CAACO,MAAvB,CAA8BL,cAAc,EAA5C,CAAV;MACAE,MAAM,GAAGA,MAAM,CAACI,SAAP,CAAiBX,iBAAiB,CAACY,MAAlB,GAA2B,CAA5C,CAAT;MACAJ,aAAa,GAAG,GAAhB;IACH;;IACD,IAAMK,OAAO,GAAG;MACZrD,QAAQ,EAARA,QADY;MAEZQ,OAAO,EAAPA;IAFY,CAAhB;IAIA,IAAM8C,IAAI,GAAGZ,YAAY,CAACW,OAAD,CAAzB;IACA,0EAAiBC,IAAI,CAACtD,QAAtB,kEAAwCgD,aAAxC,SAAwDM,IAAI,CAAC9C,OAA7D,SAAuEuC,MAAvE;EACH,CAhBM,CAAP;AAiBH,CApBD;;AAqBA,IAAMH,YAAY,GAAG,SAAfA,YAAe,CAACb,KAAD,EAAW;EAC5B,IAAMwB,UAAU,GAAGxB,KAAK,CAACyB,KAAN,CAAYpB,QAAZ,CAAnB;EACA,IAAMqB,WAAW,GAAG,EAApB;EACA,IAAMC,aAAa,GAAG,EAAtB;EACA,IAAIC,YAAY,GAAG,CAAnB;EACA,IAAIC,iBAAiB,GAAG,EAAxB;;EACA,KAAK,IAAIC,SAAS,GAAG,CAArB,EAAwBA,SAAS,GAAGN,UAAU,CAACH,MAA/C,EAAuDS,SAAS,EAAhE,EAAoE;IAChE,IAAMC,IAAI,GAAGP,UAAU,CAACM,SAAD,CAAvB;;IACA,IAAIC,IAAI,KAAKvB,WAAb,EAA0B;MACtBoB,YAAY;IACf;;IACD,IAAIA,YAAY,GAAG,CAAnB,EAAsB;MAClBC,iBAAiB,CAACrD,IAAlB,CAAuBuD,IAAvB;IACH,CAFD,MAGK;MACD,IAAIF,iBAAiB,CAACR,MAAlB,GAA2B,CAA/B,EAAkC;QAC9BM,aAAa,CAACnD,IAAd,CAAmBqD,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,CAAnB;QACAN,WAAW,CAAClD,IAAZ,CAAiBiC,iBAAjB;QACAoB,iBAAiB,GAAG,EAApB;MACH;;MACDH,WAAW,CAAClD,IAAZ,CAAiBuD,IAAjB;IACH;;IACD,IAAIA,IAAI,KAAKxB,UAAb,EAAyB;MACrBqB,YAAY;IACf;EACJ;;EACD,IAAIC,iBAAiB,CAACR,MAAlB,GAA2B,CAA/B,EAAkC;IAC9BM,aAAa,CAACnD,IAAd,CAAmBqD,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,CAAnB;IACAN,WAAW,CAAClD,IAAZ,CAAiBiC,iBAAjB;EACH;;EACD,IAAMwB,gBAAgB,GAAG;IACrBlB,aAAa,EAAEW,WAAW,CAACM,IAAZ,CAAiB,EAAjB,CADM;IAErBb,MAAM,EAAEQ;EAFa,CAAzB;EAIA,OAAOM,gBAAP;AACH,CAnCD;;AAoCA,IAAMC,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACjE,QAAD,EAAc;EAC9CA,QAAQ,GAAGA,QAAQ,CACdG,OADM,CACEyB,mBADF,EACuBb,oBADvB,EAENZ,OAFM,CAEEuB,YAFF,EAEgBb,aAFhB,EAGNV,OAHM,CAGEwB,eAHF,EAGmBb,gBAHnB,CAAX;EAIA,OAAOd,QAAP;AACH,CAND;;AAOA,IAAMkE,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,OAAD,EAAUC,MAAV,EAAkBC,YAAlB,EAAmC;EACxD;EACA,OAAOF,OAAO,CAAChE,OAAR,CAAgBiE,MAAhB,EAAwB,YAAU;IAAA,kCAANE,CAAM;MAANA,CAAM;IAAA;;IACrC,IAAIA,CAAC,CAAC,CAAD,CAAL,EAAU;MACN,IAAMC,KAAK,GAAGD,CAAC,CAAC,CAAD,CAAD,CAAKd,KAAL,CAAW,GAAX,CAAd;MACA,IAAMgB,CAAC,GAAG,EAAV;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACnB,MAA1B,EAAkCqB,CAAC,EAAnC,EAAuC;QACnC,IAAMC,CAAC,GAAGH,KAAK,CAACE,CAAD,CAAL,CAASE,IAAT,EAAV;QACA,IAAI,CAACD,CAAL,EACI;QACJF,CAAC,CAACjE,IAAF,CAAO8D,YAAY,CAAChD,yBAAD,EAA4BqD,CAA5B,EAA+BJ,CAAC,CAAC,CAAD,CAAhC,CAAnB;MACH;;MACD,OAAOE,CAAC,CAACT,IAAF,CAAO,GAAP,CAAP;IACH,CAVD,MAWK;MACD,OAAO1C,yBAAyB,GAAGiD,CAAC,CAAC,CAAD,CAApC;IACH;EACJ,CAfM,CAAP;AAgBH,CAlBD;;AAmBA,IAAMM,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,IAAD,EAAOf,IAAP,EAAaf,MAAb,EAAwB;EAClD,OAAO8B,IAAI,GAAGf,IAAI,CAAC3D,OAAL,CAAaU,aAAb,EAA4B,EAA5B,CAAP,GAAyCkC,MAAhD;AACH,CAFD;;AAGA,IAAM+B,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACX,OAAD,EAAa;EAClC,OAAOD,gBAAgB,CAACC,OAAD,EAAUlD,eAAV,EAA2B2D,qBAA3B,CAAvB;AACH,CAFD;;AAGA,IAAMG,4BAA4B,GAAG,SAA/BA,4BAA+B,CAACF,IAAD,EAAOf,IAAP,EAAaf,MAAb,EAAwB;EACzD,IAAIe,IAAI,CAACkB,OAAL,CAAanE,aAAb,IAA8B,CAAC,CAAnC,EAAsC;IAClC,OAAO+D,qBAAqB,CAACC,IAAD,EAAOf,IAAP,EAAaf,MAAb,CAA5B;EACH,CAFD,MAGK;IACD,OAAO8B,IAAI,GAAGf,IAAP,GAAcf,MAAd,GAAuB,IAAvB,GAA8Be,IAA9B,GAAqC,GAArC,GAA2Ce,IAA3C,GAAkD9B,MAAzD;EACH;AACJ,CAPD;;AAQA,IAAMkC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACd,OAAD,EAAUe,WAAV,EAA0B;EAClD,IAAMC,SAAS,GAAG,MAAMD,WAAN,GAAoB,KAAtC;EACA,IAAME,SAAS,GAAG,EAAlB;EACAjB,OAAO,GAAGA,OAAO,CAAChE,OAAR,CAAgBiB,kBAAhB,EAAoC,YAAU;IAAA,mCAANkD,CAAM;MAANA,CAAM;IAAA;;IACpD,IAAIA,CAAC,CAAC,CAAD,CAAL,EAAU;MACN,IAAMe,QAAQ,GAAGf,CAAC,CAAC,CAAD,CAAD,CAAKK,IAAL,EAAjB;MACA,IAAM5B,MAAM,GAAGuB,CAAC,CAAC,CAAD,CAAhB;MACA,IAAMgB,eAAe,GAAGH,SAAS,GAAGE,QAAZ,GAAuBtC,MAA/C;MACA,IAAIwC,cAAc,GAAG,EAArB;;MACA,KAAK,IAAId,CAAC,GAAGH,CAAC,CAAC,CAAD,CAAD,GAAO,CAApB,EAAuBG,CAAC,IAAI,CAA5B,EAA+BA,CAAC,EAAhC,EAAoC;QAChC,IAAMe,IAAI,GAAGlB,CAAC,CAAC,CAAD,CAAD,CAAKG,CAAL,CAAb;;QACA,IAAIe,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,GAA7B,EAAkC;UAC9B;QACH;;QACDD,cAAc,GAAGC,IAAI,GAAGD,cAAxB;MACH;;MACD,IAAME,WAAW,GAAGF,cAAc,GAAGD,eAArC;MACA,IAAMI,aAAa,aAAMH,cAAc,CAACI,SAAf,EAAN,SAAmCL,eAAe,CAACX,IAAhB,EAAnC,CAAnB;;MACA,IAAIc,WAAW,CAACd,IAAZ,OAAuBe,aAAa,CAACf,IAAd,EAA3B,EAAiD;QAC7C,IAAMiB,eAAe,aAAMF,aAAN,eAAwBD,WAAxB,CAArB;QACAL,SAAS,CAAC7E,IAAV,CAAe;UACXkF,WAAW,EAAXA,WADW;UAEXG,eAAe,EAAfA;QAFW,CAAf;MAIH;;MACD,OAAON,eAAP;IACH,CAtBD,MAuBK;MACD,OAAOjE,yBAAyB,GAAGiD,CAAC,CAAC,CAAD,CAApC;IACH;EACJ,CA3BS,CAAV;EA4BA,OAAO;IACHc,SAAS,EAATA,SADG;IAEHjB,OAAO,EAAPA;EAFG,CAAP;AAIH,CAnCD;;AAoCA,IAAM0B,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAC1B,OAAD,EAAa;EACzC,OAAOD,gBAAgB,CAACC,OAAD,EAAUhD,sBAAV,EAAkC4D,4BAAlC,CAAvB;AACH,CAFD;;AAGA,IAAMe,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAC3B,OAAD,EAAa;EAC3C,OAAO5C,qBAAqB,CAACwE,MAAtB,CAA6B,UAACC,MAAD,EAASC,OAAT;IAAA,OAAqBD,MAAM,CAAC7F,OAAP,CAAe8F,OAAf,EAAwB,GAAxB,CAArB;EAAA,CAA7B,EAAgF9B,OAAhF,CAAP;AACH,CAFD;;AAGA,IAAM+B,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,aAAD,EAAmB;EACxC,IAAMC,GAAG,GAAG,KAAZ;EACA,IAAMC,GAAG,GAAG,KAAZ;EACAF,aAAa,GAAGA,aAAa,CAAChG,OAAd,CAAsBiG,GAAtB,EAA2B,KAA3B,EAAkCjG,OAAlC,CAA0CkG,GAA1C,EAA+C,KAA/C,CAAhB;EACA,OAAO,IAAInF,MAAJ,CAAW,OAAOiF,aAAP,GAAuB,GAAvB,GAA6B3E,iBAAxC,EAA2D,GAA3D,CAAP;AACH,CALD;;AAMA,IAAM8E,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACtG,QAAD,EAAWmG,aAAX,EAA6B;EACtD,IAAMI,EAAE,GAAGL,gBAAgB,CAACC,aAAD,CAA3B;EACA,OAAO,CAACI,EAAE,CAACC,IAAH,CAAQxG,QAAR,CAAR;AACH,CAHD;;AAIA,IAAMyG,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACzG,QAAD,EAAW0G,eAAX,EAA+B;EACzD,OAAO1G,QAAQ,CAACG,OAAT,CAAiBkC,gBAAjB,EAAmC,UAACjC,CAAD,EAAyD;IAAA,IAArDuG,MAAqD,uEAA5C,EAA4C;;IAAA,IAAxCC,WAAwC;;IAAA,IAA3BC,KAA2B,uEAAnB,EAAmB;IAAA,IAAfC,KAAe,uEAAP,EAAO;IAC/F,OAAOH,MAAM,GAAGD,eAAT,GAA2BG,KAA3B,GAAmCC,KAA1C;EACH,CAFM,CAAP;AAGH,CAJD;;AAKA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAC/G,QAAD,EAAWmG,aAAX,EAA0Ba,YAA1B,EAA2C;EACxE;EACAvF,eAAe,CAACwF,SAAhB,GAA4B,CAA5B;;EACA,IAAIxF,eAAe,CAAC+E,IAAhB,CAAqBxG,QAArB,CAAJ,EAAoC;IAChC,IAAMM,SAAS,cAAO0G,YAAP,CAAf;IACA,OAAOhH,QAAQ,CACVG,OADE,CACMmB,2BADN,EACmC,UAAClB,CAAD,EAAIJ,QAAJ;MAAA,OAAiByG,qBAAqB,CAACzG,QAAD,EAAWM,SAAX,CAAtC;IAAA,CADnC,EAEFH,OAFE,CAEMsB,eAFN,EAEuBnB,SAAS,GAAG,GAFnC,CAAP;EAGH;;EACD,OAAO6F,aAAa,GAAG,GAAhB,GAAsBnG,QAA7B;AACH,CAVD;;AAWA,IAAMkH,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAClH,QAAD,EAAWmG,aAAX,EAA0Ba,YAA1B,EAA2C;EACxE,IAAMG,IAAI,GAAG,kBAAb;EACAhB,aAAa,GAAGA,aAAa,CAAChG,OAAd,CAAsBgH,IAAtB,EAA4B,UAAC/G,CAAD;IAAA;EAAA,CAA5B,CAAhB;EACA,IAAMgH,SAAS,GAAG,MAAMjB,aAAxB;;EACA,IAAMkB,kBAAkB,GAAG,SAArBA,kBAAqB,CAAC3C,CAAD,EAAO;IAC9B,IAAI4C,OAAO,GAAG5C,CAAC,CAACC,IAAF,EAAd;;IACA,IAAI,CAAC2C,OAAL,EAAc;MACV,OAAO,EAAP;IACH;;IACD,IAAI5C,CAAC,CAACM,OAAF,CAAU3D,yBAAV,IAAuC,CAAC,CAA5C,EAA+C;MAC3CiG,OAAO,GAAGP,wBAAwB,CAACrC,CAAD,EAAIyB,aAAJ,EAAmBa,YAAnB,CAAlC;IACH,CAFD,MAGK;MACD;MACA,IAAMO,CAAC,GAAG7C,CAAC,CAACvE,OAAF,CAAUsB,eAAV,EAA2B,EAA3B,CAAV;;MACA,IAAI8F,CAAC,CAACnE,MAAF,GAAW,CAAf,EAAkB;QACdkE,OAAO,GAAGb,qBAAqB,CAACc,CAAD,EAAIH,SAAJ,CAA/B;MACH;IACJ;;IACD,OAAOE,OAAP;EACH,CAhBD;;EAiBA,IAAME,WAAW,GAAGzH,YAAY,CAACC,QAAD,CAAhC;EACAA,QAAQ,GAAGwH,WAAW,CAAChH,OAAvB;EACA,IAAIiH,cAAc,GAAG,EAArB;EACA,IAAIC,UAAU,GAAG,CAAjB;EACA,IAAIC,GAAJ;EACA,IAAMC,GAAG,GAAG,qBAAZ,CA1BwE,CA2BxE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,IAAMC,OAAO,GAAG7H,QAAQ,CAACgF,OAAT,CAAiB3D,yBAAjB,IAA8C,CAAC,CAA/D,CAtCwE,CAuCxE;;EACA,IAAIyG,WAAW,GAAG,CAACD,OAAnB;;EACA,OAAO,CAACF,GAAG,GAAGC,GAAG,CAACG,IAAJ,CAAS/H,QAAT,CAAP,MAA+B,IAAtC,EAA4C;IACxC,IAAMgI,SAAS,GAAGL,GAAG,CAAC,CAAD,CAArB;;IACA,IAAM7D,KAAI,GAAG9D,QAAQ,CAACiI,KAAT,CAAeP,UAAf,EAA2BC,GAAG,CAACzH,KAA/B,EAAsCyE,IAAtC,EAAb;;IACAmD,WAAW,GAAGA,WAAW,IAAIhE,KAAI,CAACkB,OAAL,CAAa3D,yBAAb,IAA0C,CAAC,CAAxE;IACA,IAAM6G,UAAU,GAAGJ,WAAW,GAAGT,kBAAkB,CAACvD,KAAD,CAArB,GAA8BA,KAA5D;IACA2D,cAAc,cAAOS,UAAP,cAAqBF,SAArB,MAAd;IACAN,UAAU,GAAGE,GAAG,CAACX,SAAjB;EACH;;EACD,IAAMnD,IAAI,GAAG9D,QAAQ,CAACmD,SAAT,CAAmBuE,UAAnB,CAAb;EACAI,WAAW,GAAGA,WAAW,IAAIhE,IAAI,CAACkB,OAAL,CAAa3D,yBAAb,IAA0C,CAAC,CAAxE;EACAoG,cAAc,IAAIK,WAAW,GAAGT,kBAAkB,CAACvD,IAAD,CAArB,GAA8BA,IAA3D,CAnDwE,CAoDxE;;EACA,OAAOlD,mBAAmB,CAAC4G,WAAW,CAACvH,YAAb,EAA2BwH,cAA3B,CAA1B;AACH,CAtDD;;AAuDA,IAAMtB,aAAa,GAAG,SAAhBA,aAAgB,CAACnG,QAAD,EAAWmI,iBAAX,EAA8BnB,YAA9B,EAA4CoB,YAA5C,EAA6D;EAC/E,OAAOpI,QAAQ,CACVwD,KADE,CACI,GADJ,EAEF6E,GAFE,CAEE,UAACC,WAAD,EAAiB;IACtB,IAAIF,YAAY,IAAIE,WAAW,CAACtD,OAAZ,CAAoB,MAAMoD,YAA1B,IAA0C,CAAC,CAA/D,EAAkE;MAC9D,OAAOE,WAAW,CAAC3D,IAAZ,EAAP;IACH;;IACD,IAAI2B,oBAAoB,CAACgC,WAAD,EAAcH,iBAAd,CAAxB,EAA0D;MACtD,OAAOjB,wBAAwB,CAACoB,WAAD,EAAcH,iBAAd,EAAiCnB,YAAjC,CAAxB,CAAuErC,IAAvE,EAAP;IACH,CAFD,MAGK;MACD,OAAO2D,WAAW,CAAC3D,IAAZ,EAAP;IACH;EACJ,CAZM,EAaFZ,IAbE,CAaG,IAbH,CAAP;AAcH,CAfD;;AAgBA,IAAMwE,cAAc,GAAG,SAAjBA,cAAiB,CAACpE,OAAD,EAAUgE,iBAAV,EAA6BnB,YAA7B,EAA2CoB,YAA3C,EAAyDI,uBAAzD,EAAqF;EACxG,OAAO/F,YAAY,CAAC0B,OAAD,EAAU,UAACb,IAAD,EAAU;IACnC,IAAItD,QAAQ,GAAGsD,IAAI,CAACtD,QAApB;IACA,IAAIQ,OAAO,GAAG8C,IAAI,CAAC9C,OAAnB;;IACA,IAAI8C,IAAI,CAACtD,QAAL,CAAc,CAAd,MAAqB,GAAzB,EAA8B;MAC1BA,QAAQ,GAAGmG,aAAa,CAAC7C,IAAI,CAACtD,QAAN,EAAgBmI,iBAAhB,EAAmCnB,YAAnC,EAAiDoB,YAAjD,CAAxB;IACH,CAFD,MAGK,IAAI9E,IAAI,CAACtD,QAAL,CAAciD,UAAd,CAAyB,QAAzB,KACLK,IAAI,CAACtD,QAAL,CAAciD,UAAd,CAAyB,WAAzB,CADK,IAELK,IAAI,CAACtD,QAAL,CAAciD,UAAd,CAAyB,OAAzB,CAFK,IAGLK,IAAI,CAACtD,QAAL,CAAciD,UAAd,CAAyB,WAAzB,CAHC,EAGsC;MACvCzC,OAAO,GAAG+H,cAAc,CAACjF,IAAI,CAAC9C,OAAN,EAAe2H,iBAAf,EAAkCnB,YAAlC,EAAgDoB,YAAhD,CAAxB;IACH;;IACD,IAAM/E,OAAO,GAAG;MACZrD,QAAQ,EAAEA,QAAQ,CAACG,OAAT,CAAiB,SAAjB,EAA4B,GAA5B,EAAiCwE,IAAjC,EADE;MAEZnE,OAAO,EAAPA;IAFY,CAAhB;IAIA,OAAO6C,OAAP;EACH,CAjBkB,CAAnB;AAkBH,CAnBD;;AAoBA,IAAMoF,YAAY,GAAG,SAAfA,YAAe,CAACtE,OAAD,EAAUuE,OAAV,EAAmBC,WAAnB,EAAgCzD,WAAhC,EAA6CsD,uBAA7C,EAAyE;EAC1FrE,OAAO,GAAGF,2BAA2B,CAACE,OAAD,CAArC;EACAA,OAAO,GAAGW,gBAAgB,CAACX,OAAD,CAA1B;EACAA,OAAO,GAAG0B,uBAAuB,CAAC1B,OAAD,CAAjC;EACA,IAAMyE,OAAO,GAAG3D,mBAAmB,CAACd,OAAD,EAAUe,WAAV,CAAnC;EACAf,OAAO,GAAGyE,OAAO,CAACzE,OAAlB;EACAA,OAAO,GAAG2B,yBAAyB,CAAC3B,OAAD,CAAnC;;EACA,IAAIuE,OAAJ,EAAa;IACTvE,OAAO,GAAGoE,cAAc,CAACpE,OAAD,EAAUuE,OAAV,EAAmBC,WAAnB,EAAgCzD,WAAhC,CAAxB;EACH;;EACDf,OAAO,GAAGA,OAAO,CAAChE,OAAR,CAAgB,+BAAhB,aAAqDwI,WAArD,EAAV;EACAxE,OAAO,GAAGA,OAAO,CAAChE,OAAR,CAAgB,sBAAhB,EAAwC,MAAxC,CAAV;EACA,OAAO;IACHgE,OAAO,EAAEA,OAAO,CAACQ,IAAR,EADN;IAEHkE,gBAAgB,EAAED,OAAO,CAACxD;EAFvB,CAAP;AAIH,CAhBD;;AAiBA,IAAM0D,QAAQ,GAAG,SAAXA,QAAW,CAAC3E,OAAD,EAAUuE,OAAV,EAAmBF,uBAAnB,EAA+C;EAC5D,IAAMG,WAAW,GAAGD,OAAO,GAAG,IAA9B;EACA,IAAMxD,WAAW,GAAGwD,OAAO,GAAG,IAA9B;EACA,IAAMK,gBAAgB,GAAG9G,uBAAuB,CAACkC,OAAD,CAAhD;EACAA,OAAO,GAAGrC,aAAa,CAACqC,OAAD,CAAvB;EACA,IAAM6E,YAAY,GAAG,EAArB;;EACA,IAAIR,uBAAJ,EAA6B;IACzB,IAAMS,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAC3F,IAAD,EAAU;MACvC,IAAM4F,WAAW,oBAAaF,YAAY,CAAC5F,MAA1B,UAAjB;MACA,IAAM+F,OAAO,iBAAU7F,IAAI,CAACtD,QAAf,OAAb;MACAgJ,YAAY,CAACzI,IAAb,CAAkB;QAAE2I,WAAW,EAAXA,WAAF;QAAeC,OAAO,EAAPA;MAAf,CAAlB;MACA7F,IAAI,CAACtD,QAAL,GAAgBkJ,WAAW,GAAG5F,IAAI,CAACtD,QAAnC;MACA,OAAOsD,IAAP;IACH,CAND;;IAOAa,OAAO,GAAG1B,YAAY,CAAC0B,OAAD,EAAU,UAACb,IAAD,EAAU;MACtC,IAAIA,IAAI,CAACtD,QAAL,CAAc,CAAd,MAAqB,GAAzB,EAA8B;QAC1B,OAAOiJ,wBAAwB,CAAC3F,IAAD,CAA/B;MACH,CAFD,MAGK,IAAIA,IAAI,CAACtD,QAAL,CAAciD,UAAd,CAAyB,QAAzB,KACLK,IAAI,CAACtD,QAAL,CAAciD,UAAd,CAAyB,WAAzB,CADK,IAELK,IAAI,CAACtD,QAAL,CAAciD,UAAd,CAAyB,OAAzB,CAFK,IAGLK,IAAI,CAACtD,QAAL,CAAciD,UAAd,CAAyB,WAAzB,CAHC,EAGsC;QACvCK,IAAI,CAAC9C,OAAL,GAAeiC,YAAY,CAACa,IAAI,CAAC9C,OAAN,EAAeyI,wBAAf,CAA3B;QACA,OAAO3F,IAAP;MACH;;MACD,OAAOA,IAAP;IACH,CAZqB,CAAtB;EAaH;;EACD,IAAM8F,MAAM,GAAGX,YAAY,CAACtE,OAAD,EAAUuE,OAAV,EAAmBC,WAAnB,EAAgCzD,WAAhC,CAA3B;EACAf,OAAO,GAAG,CAACiF,MAAM,CAACjF,OAAR,4BAAoB4E,gBAApB,GAAsChF,IAAtC,CAA2C,IAA3C,CAAV;;EACA,IAAIyE,uBAAJ,EAA6B;IACzBQ,YAAY,CAACK,OAAb,CAAqB,gBAA8B;MAAA,IAA3BH,WAA2B,QAA3BA,WAA2B;MAAA,IAAdC,OAAc,QAAdA,OAAc;MAC/ChF,OAAO,GAAGA,OAAO,CAAChE,OAAR,CAAgB+I,WAAhB,EAA6BC,OAA7B,CAAV;IACH,CAFD;EAGH;;EACDC,MAAM,CAACP,gBAAP,CAAwBQ,OAAxB,CAAgC,UAAC/D,eAAD,EAAqB;IACjDnB,OAAO,GAAGA,OAAO,CAAChE,OAAR,CAAgBmF,eAAe,CAACG,WAAhC,EAA6CH,eAAe,CAACM,eAA7D,CAAV;EACH,CAFD;EAGA,OAAOzB,OAAP;AACH,CAvCD;;AAyCA,SAAS2E,QAAT"},"metadata":{},"sourceType":"module"}