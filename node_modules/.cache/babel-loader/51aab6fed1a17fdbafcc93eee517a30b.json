{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/tanishq-singh-2301/hello/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/home/tanishq-singh-2301/hello/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/tanishq-singh-2301/hello/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/tanishq-singh-2301/hello/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tanishq-singh-2301/hello/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { DBWrapper } from 'workbox-core/_private/DBWrapper.js';\nimport { deleteDatabase } from 'workbox-core/_private/deleteDatabase.js';\nimport '../_version.js';\nvar DB_NAME = 'workbox-expiration';\nvar OBJECT_STORE_NAME = 'cache-entries';\n\nvar normalizeURL = function normalizeURL(unNormalizedUrl) {\n  var url = new URL(unNormalizedUrl, location.href);\n  url.hash = '';\n  return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\n\n\nvar CacheTimestampsModel = /*#__PURE__*/function () {\n  /**\n   *\n   * @param {string} cacheName\n   *\n   * @private\n   */\n  function CacheTimestampsModel(cacheName) {\n    var _this = this;\n\n    _classCallCheck(this, CacheTimestampsModel);\n\n    this._cacheName = cacheName;\n    this._db = new DBWrapper(DB_NAME, 1, {\n      onupgradeneeded: function onupgradeneeded(event) {\n        return _this._handleUpgrade(event);\n      }\n    });\n  }\n  /**\n   * Should perform an upgrade of indexedDB.\n   *\n   * @param {Event} event\n   *\n   * @private\n   */\n\n\n  _createClass(CacheTimestampsModel, [{\n    key: \"_handleUpgrade\",\n    value: function _handleUpgrade(event) {\n      var db = event.target.result; // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n      // have to use the `id` keyPath here and create our own values (a\n      // concatenation of `url + cacheName`) instead of simply using\n      // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n\n      var objStore = db.createObjectStore(OBJECT_STORE_NAME, {\n        keyPath: 'id'\n      }); // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n      // create a single index with the keyPath `['cacheName', 'timestamp']`\n      // instead of doing both these indexes.\n\n      objStore.createIndex('cacheName', 'cacheName', {\n        unique: false\n      });\n      objStore.createIndex('timestamp', 'timestamp', {\n        unique: false\n      }); // Previous versions of `workbox-expiration` used `this._cacheName`\n      // as the IDBDatabase name.\n\n      deleteDatabase(this._cacheName);\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n\n  }, {\n    key: \"setTimestamp\",\n    value: function () {\n      var _setTimestamp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url, timestamp) {\n        var entry;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = normalizeURL(url);\n                entry = {\n                  url: url,\n                  timestamp: timestamp,\n                  cacheName: this._cacheName,\n                  // Creating an ID from the URL and cache name won't be necessary once\n                  // Edge switches to Chromium and all browsers we support work with\n                  // array keyPaths.\n                  id: this._getId(url)\n                };\n                _context.next = 4;\n                return this._db.put(OBJECT_STORE_NAME, entry);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setTimestamp(_x, _x2) {\n        return _setTimestamp.apply(this, arguments);\n      }\n\n      return setTimestamp;\n    }()\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"getTimestamp\",\n    value: function () {\n      var _getTimestamp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url) {\n        var entry;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._db.get(OBJECT_STORE_NAME, this._getId(url));\n\n              case 2:\n                entry = _context2.sent;\n                return _context2.abrupt(\"return\", entry.timestamp);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getTimestamp(_x3) {\n        return _getTimestamp.apply(this, arguments);\n      }\n\n      return getTimestamp;\n    }()\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"expireEntries\",\n    value: function () {\n      var _expireEntries = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(minTimestamp, maxCount) {\n        var _this2 = this;\n\n        var entriesToDelete, urlsDeleted, _iterator, _step, entry;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this._db.transaction(OBJECT_STORE_NAME, 'readwrite', function (txn, done) {\n                  var store = txn.objectStore(OBJECT_STORE_NAME);\n                  var request = store.index('timestamp').openCursor(null, 'prev');\n                  var entriesToDelete = [];\n                  var entriesNotDeletedCount = 0;\n\n                  request.onsuccess = function () {\n                    var cursor = request.result;\n\n                    if (cursor) {\n                      var result = cursor.value; // TODO(philipwalton): once we can use a multi-key index, we\n                      // won't have to check `cacheName` here.\n\n                      if (result.cacheName === _this2._cacheName) {\n                        // Delete an entry if it's older than the max age or\n                        // if we already have the max number allowed.\n                        if (minTimestamp && result.timestamp < minTimestamp || maxCount && entriesNotDeletedCount >= maxCount) {\n                          // TODO(philipwalton): we should be able to delete the\n                          // entry right here, but doing so causes an iteration\n                          // bug in Safari stable (fixed in TP). Instead we can\n                          // store the keys of the entries to delete, and then\n                          // delete the separate transactions.\n                          // https://github.com/GoogleChrome/workbox/issues/1978\n                          // cursor.delete();\n                          // We only need to return the URL, not the whole entry.\n                          entriesToDelete.push(cursor.value);\n                        } else {\n                          entriesNotDeletedCount++;\n                        }\n                      }\n\n                      cursor.continue();\n                    } else {\n                      done(entriesToDelete);\n                    }\n                  };\n                });\n\n              case 2:\n                entriesToDelete = _context3.sent;\n                // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n                // we should be able to remove this loop and do the entry deletion in the\n                // cursor loop above:\n                // https://github.com/GoogleChrome/workbox/issues/1978\n                urlsDeleted = [];\n                _iterator = _createForOfIteratorHelper(entriesToDelete);\n                _context3.prev = 5;\n\n                _iterator.s();\n\n              case 7:\n                if ((_step = _iterator.n()).done) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                entry = _step.value;\n                _context3.next = 11;\n                return this._db.delete(OBJECT_STORE_NAME, entry.id);\n\n              case 11:\n                urlsDeleted.push(entry.url);\n\n              case 12:\n                _context3.next = 7;\n                break;\n\n              case 14:\n                _context3.next = 19;\n                break;\n\n              case 16:\n                _context3.prev = 16;\n                _context3.t0 = _context3[\"catch\"](5);\n\n                _iterator.e(_context3.t0);\n\n              case 19:\n                _context3.prev = 19;\n\n                _iterator.f();\n\n                return _context3.finish(19);\n\n              case 22:\n                return _context3.abrupt(\"return\", urlsDeleted);\n\n              case 23:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[5, 16, 19, 22]]);\n      }));\n\n      function expireEntries(_x4, _x5) {\n        return _expireEntries.apply(this, arguments);\n      }\n\n      return expireEntries;\n    }()\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_getId\",\n    value: function _getId(url) {\n      // Creating an ID from the URL and cache name won't be necessary once\n      // Edge switches to Chromium and all browsers we support work with\n      // array keyPaths.\n      return this._cacheName + '|' + normalizeURL(url);\n    }\n  }]);\n\n  return CacheTimestampsModel;\n}();\n\nexport { CacheTimestampsModel };","map":{"version":3,"names":["DBWrapper","deleteDatabase","DB_NAME","OBJECT_STORE_NAME","normalizeURL","unNormalizedUrl","url","URL","location","href","hash","CacheTimestampsModel","cacheName","_cacheName","_db","onupgradeneeded","event","_handleUpgrade","db","target","result","objStore","createObjectStore","keyPath","createIndex","unique","timestamp","entry","id","_getId","put","get","minTimestamp","maxCount","transaction","txn","done","store","objectStore","request","index","openCursor","entriesToDelete","entriesNotDeletedCount","onsuccess","cursor","value","push","continue","urlsDeleted","delete"],"sources":["/home/tanishq-singh-2301/hello/node_modules/workbox-expiration/models/CacheTimestampsModel.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { DBWrapper } from 'workbox-core/_private/DBWrapper.js';\nimport { deleteDatabase } from 'workbox-core/_private/deleteDatabase.js';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst OBJECT_STORE_NAME = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._cacheName = cacheName;\n        this._db = new DBWrapper(DB_NAME, 1, {\n            onupgradeneeded: (event) => this._handleUpgrade(event),\n        });\n    }\n    /**\n     * Should perform an upgrade of indexedDB.\n     *\n     * @param {Event} event\n     *\n     * @private\n     */\n    _handleUpgrade(event) {\n        const db = event.target.result;\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n        // Previous versions of `workbox-expiration` used `this._cacheName`\n        // as the IDBDatabase name.\n        deleteDatabase(this._cacheName);\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        await this._db.put(OBJECT_STORE_NAME, entry);\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const entry = await this._db.get(OBJECT_STORE_NAME, this._getId(url));\n        return entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const entriesToDelete = await this._db.transaction(OBJECT_STORE_NAME, 'readwrite', (txn, done) => {\n            const store = txn.objectStore(OBJECT_STORE_NAME);\n            const request = store.index('timestamp').openCursor(null, 'prev');\n            const entriesToDelete = [];\n            let entriesNotDeletedCount = 0;\n            request.onsuccess = () => {\n                const cursor = request.result;\n                if (cursor) {\n                    const result = cursor.value;\n                    // TODO(philipwalton): once we can use a multi-key index, we\n                    // won't have to check `cacheName` here.\n                    if (result.cacheName === this._cacheName) {\n                        // Delete an entry if it's older than the max age or\n                        // if we already have the max number allowed.\n                        if ((minTimestamp && result.timestamp < minTimestamp) ||\n                            (maxCount && entriesNotDeletedCount >= maxCount)) {\n                            // TODO(philipwalton): we should be able to delete the\n                            // entry right here, but doing so causes an iteration\n                            // bug in Safari stable (fixed in TP). Instead we can\n                            // store the keys of the entries to delete, and then\n                            // delete the separate transactions.\n                            // https://github.com/GoogleChrome/workbox/issues/1978\n                            // cursor.delete();\n                            // We only need to return the URL, not the whole entry.\n                            entriesToDelete.push(cursor.value);\n                        }\n                        else {\n                            entriesNotDeletedCount++;\n                        }\n                    }\n                    cursor.continue();\n                }\n                else {\n                    done(entriesToDelete);\n                }\n            };\n        });\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await this._db.delete(OBJECT_STORE_NAME, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n}\nexport { CacheTimestampsModel };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}