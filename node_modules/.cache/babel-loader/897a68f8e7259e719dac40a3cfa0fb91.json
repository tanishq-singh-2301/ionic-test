{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/tanishq-singh-2301/hello/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _construct from \"/home/tanishq-singh-2301/hello/node_modules/@babel/runtime/helpers/esm/construct.js\";\nimport _toConsumableArray from \"/home/tanishq-singh-2301/hello/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/home/tanishq-singh-2301/hello/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tanishq-singh-2301/hello/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * The Router can be used to process a FetchEvent through one or more\n * [Routes]{@link module:workbox-routing.Route} responding  with a Request if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof module:workbox-routing\n */\n\nvar Router = /*#__PURE__*/function () {\n  /**\n   * Initializes a new Router.\n   */\n  function Router() {\n    _classCallCheck(this, Router);\n\n    this._routes = new Map();\n  }\n  /**\n   * @return {Map<string, Array<module:workbox-routing.Route>>} routes A `Map` of HTTP\n   * method name ('GET', etc.) to an array of all the corresponding `Route`\n   * instances that are registered.\n   */\n\n\n  _createClass(Router, [{\n    key: \"routes\",\n    get: function get() {\n      return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n\n  }, {\n    key: \"addFetchListener\",\n    value: function addFetchListener() {\n      var _this = this;\n\n      // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n      self.addEventListener('fetch', function (event) {\n        var request = event.request;\n\n        var responsePromise = _this.handleRequest({\n          request: request,\n          event: event\n        });\n\n        if (responsePromise) {\n          event.respondWith(responsePromise);\n        }\n      });\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n\n  }, {\n    key: \"addCacheListener\",\n    value: function addCacheListener() {\n      var _this2 = this;\n\n      // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n      self.addEventListener('message', function (event) {\n        if (event.data && event.data.type === 'CACHE_URLS') {\n          var payload = event.data.payload;\n\n          if (process.env.NODE_ENV !== 'production') {\n            logger.debug(\"Caching URLs from the window\", payload.urlsToCache);\n          }\n\n          var requestPromises = Promise.all(payload.urlsToCache.map(function (entry) {\n            if (typeof entry === 'string') {\n              entry = [entry];\n            }\n\n            var request = _construct(Request, _toConsumableArray(entry));\n\n            return _this2.handleRequest({\n              request: request\n            }); // TODO(philipwalton): TypeScript errors without this typecast for\n            // some reason (probably a bug). The real type here should work but\n            // doesn't: `Array<Promise<Response> | undefined>`.\n          })); // TypeScript\n\n          event.waitUntil(requestPromises); // If a MessageChannel was used, reply to the message on success.\n\n          if (event.ports && event.ports[0]) {\n            requestPromises.then(function () {\n              return event.ports[0].postMessage(true);\n            });\n          }\n        }\n      });\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle (this is usually\n     *     from a fetch event, but it does not have to be).\n     * @param {FetchEvent} [options.event] The event that triggered the request,\n     *     if applicable.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n\n  }, {\n    key: \"handleRequest\",\n    value: function handleRequest(_ref) {\n      var _this3 = this;\n\n      var request = _ref.request,\n          event = _ref.event;\n\n      if (process.env.NODE_ENV !== 'production') {\n        assert.isInstance(request, Request, {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'handleRequest',\n          paramName: 'options.request'\n        });\n      }\n\n      var url = new URL(request.url, location.href);\n\n      if (!url.protocol.startsWith('http')) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.debug(\"Workbox Router only supports URLs that start with 'http'.\");\n        }\n\n        return;\n      }\n\n      var _this$findMatchingRou = this.findMatchingRoute({\n        url: url,\n        request: request,\n        event: event\n      }),\n          params = _this$findMatchingRou.params,\n          route = _this$findMatchingRou.route;\n\n      var handler = route && route.handler;\n      var debugMessages = [];\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (handler) {\n          debugMessages.push([\"Found a route to handle this request:\", route]);\n\n          if (params) {\n            debugMessages.push([\"Passing the following params to the route's handler:\", params]);\n          }\n        }\n      } // If we don't have a handler because there was no matching route, then\n      // fall back to defaultHandler if that's defined.\n\n\n      if (!handler && this._defaultHandler) {\n        if (process.env.NODE_ENV !== 'production') {\n          debugMessages.push(\"Failed to find a matching route. Falling \" + \"back to the default handler.\");\n        }\n\n        handler = this._defaultHandler;\n      }\n\n      if (!handler) {\n        if (process.env.NODE_ENV !== 'production') {\n          // No handler so Workbox will do nothing. If logs is set of debug\n          // i.e. verbose, we should print out this information.\n          logger.debug(\"No route found for: \".concat(getFriendlyURL(url)));\n        }\n\n        return;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        // We have a handler, meaning Workbox is going to handle the route.\n        // print the routing details to the console.\n        logger.groupCollapsed(\"Router is responding to: \".concat(getFriendlyURL(url)));\n        debugMessages.forEach(function (msg) {\n          if (Array.isArray(msg)) {\n            logger.log.apply(logger, _toConsumableArray(msg));\n          } else {\n            logger.log(msg);\n          }\n        });\n        logger.groupEnd();\n      } // Wrap in try and catch in case the handle method throws a synchronous\n      // error. It should still callback to the catch handler.\n\n\n      var responsePromise;\n\n      try {\n        responsePromise = handler.handle({\n          url: url,\n          request: request,\n          event: event,\n          params: params\n        });\n      } catch (err) {\n        responsePromise = Promise.reject(err);\n      }\n\n      if (responsePromise instanceof Promise && this._catchHandler) {\n        responsePromise = responsePromise.catch(function (err) {\n          if (process.env.NODE_ENV !== 'production') {\n            // Still include URL here as it will be async from the console group\n            // and may not make sense without the URL\n            logger.groupCollapsed(\"Error thrown when responding to: \" + \" \".concat(getFriendlyURL(url), \". Falling back to Catch Handler.\"));\n            logger.error(\"Error thrown by:\", route);\n            logger.error(err);\n            logger.groupEnd();\n          }\n\n          return _this3._catchHandler.handle({\n            url: url,\n            request: request,\n            event: event\n          });\n        });\n      }\n\n      return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request The request to match.\n     * @param {Event} [options.event] The corresponding event (unless N/A).\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n\n  }, {\n    key: \"findMatchingRoute\",\n    value: function findMatchingRoute(_ref2) {\n      var url = _ref2.url,\n          request = _ref2.request,\n          event = _ref2.event;\n\n      if (process.env.NODE_ENV !== 'production') {\n        assert.isInstance(url, URL, {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'findMatchingRoute',\n          paramName: 'options.url'\n        });\n        assert.isInstance(request, Request, {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'findMatchingRoute',\n          paramName: 'options.request'\n        });\n      }\n\n      var routes = this._routes.get(request.method) || [];\n\n      var _iterator = _createForOfIteratorHelper(routes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var route = _step.value;\n          var params = void 0;\n          var matchResult = route.match({\n            url: url,\n            request: request,\n            event: event\n          });\n\n          if (matchResult) {\n            // See https://github.com/GoogleChrome/workbox/issues/2079\n            params = matchResult;\n\n            if (Array.isArray(matchResult) && matchResult.length === 0) {\n              // Instead of passing an empty array in as params, use undefined.\n              params = undefined;\n            } else if (matchResult.constructor === Object && Object.keys(matchResult).length === 0) {\n              // Instead of passing an empty object in as params, use undefined.\n              params = undefined;\n            } else if (typeof matchResult === 'boolean') {\n              // For the boolean value true (rather than just something truth-y),\n              // don't set params.\n              // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n              params = undefined;\n            } // Return early if have a match.\n\n\n            return {\n              route: route,\n              params: params\n            };\n          }\n        } // If no match was found above, return and empty object.\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n\n  }, {\n    key: \"setDefaultHandler\",\n    value: function setDefaultHandler(handler) {\n      this._defaultHandler = normalizeHandler(handler);\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n\n  }, {\n    key: \"setCatchHandler\",\n    value: function setCatchHandler(handler) {\n      this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to register.\n     */\n\n  }, {\n    key: \"registerRoute\",\n    value: function registerRoute(route) {\n      if (process.env.NODE_ENV !== 'production') {\n        assert.isType(route, 'object', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route'\n        });\n        assert.hasMethod(route, 'match', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route'\n        });\n        assert.isType(route.handler, 'object', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route'\n        });\n        assert.hasMethod(route.handler, 'handle', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route.handler'\n        });\n        assert.isType(route.method, 'string', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route.method'\n        });\n      }\n\n      if (!this._routes.has(route.method)) {\n        this._routes.set(route.method, []);\n      } // Give precedence to all of the earlier routes by adding this additional\n      // route to the end of the array.\n\n\n      this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to unregister.\n     */\n\n  }, {\n    key: \"unregisterRoute\",\n    value: function unregisterRoute(route) {\n      if (!this._routes.has(route.method)) {\n        throw new WorkboxError('unregister-route-but-not-found-with-method', {\n          method: route.method\n        });\n      }\n\n      var routeIndex = this._routes.get(route.method).indexOf(route);\n\n      if (routeIndex > -1) {\n        this._routes.get(route.method).splice(routeIndex, 1);\n      } else {\n        throw new WorkboxError('unregister-route-route-not-registered');\n      }\n    }\n  }]);\n\n  return Router;\n}();\n\nexport { Router };","map":{"version":3,"names":["assert","logger","WorkboxError","getFriendlyURL","normalizeHandler","Router","_routes","Map","self","addEventListener","event","request","responsePromise","handleRequest","respondWith","data","type","payload","process","env","NODE_ENV","debug","urlsToCache","requestPromises","Promise","all","map","entry","Request","waitUntil","ports","then","postMessage","isInstance","moduleName","className","funcName","paramName","url","URL","location","href","protocol","startsWith","findMatchingRoute","params","route","handler","debugMessages","push","_defaultHandler","groupCollapsed","forEach","msg","Array","isArray","log","groupEnd","handle","err","reject","_catchHandler","catch","error","routes","get","method","matchResult","match","length","undefined","constructor","Object","keys","isType","hasMethod","has","set","routeIndex","indexOf","splice"],"sources":["/home/tanishq-singh-2301/hello/node_modules/workbox-routing/Router.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * The Router can be used to process a FetchEvent through one or more\n * [Routes]{@link module:workbox-routing.Route} responding  with a Request if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof module:workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n    }\n    /**\n     * @return {Map<string, Array<module:workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle (this is usually\n     *     from a fetch event, but it does not have to be).\n     * @param {FetchEvent} [options.event] The event that triggered the request,\n     *     if applicable.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const { params, route } = this.findMatchingRoute({ url, request, event });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([\n                    `Found a route to handle this request:`, route,\n                ]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`, params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        if (!handler && this._defaultHandler) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler.`);\n            }\n            handler = this._defaultHandler;\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        if (responsePromise instanceof Promise && this._catchHandler) {\n            responsePromise = responsePromise.catch((err) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Still include URL here as it will be async from the console group\n                    // and may not make sense without the URL\n                    logger.groupCollapsed(`Error thrown when responding to: ` +\n                        ` ${getFriendlyURL(url)}. Falling back to Catch Handler.`);\n                    logger.error(`Error thrown by:`, route);\n                    logger.error(err);\n                    logger.groupEnd();\n                }\n                return this._catchHandler.handle({ url, request, event });\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request The request to match.\n     * @param {Event} [options.event] The corresponding event (unless N/A).\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, request, event }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(url, URL, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'findMatchingRoute',\n                paramName: 'options.url',\n            });\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'findMatchingRoute',\n                paramName: 'options.request',\n            });\n        }\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            const matchResult = route.match({ url, request, event });\n            if (matchResult) {\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                params = matchResult;\n                if (Array.isArray(matchResult) && matchResult.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if ((matchResult.constructor === Object &&\n                    Object.keys(matchResult).length === 0)) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setDefaultHandler(handler) {\n        this._defaultHandler = normalizeHandler(handler);\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,iCAAvB;AACA,SAASC,MAAT,QAAuB,iCAAvB;AACA,SAASC,YAAT,QAA6B,uCAA7B;AACA,SAASC,cAAT,QAA+B,yCAA/B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,OAAO,eAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,M;EACF;AACJ;AACA;EACI,kBAAc;IAAA;;IACV,KAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;EACH;EACD;AACJ;AACA;AACA;AACA;;;;;SACI,eAAa;MACT,OAAO,KAAKD,OAAZ;IACH;IACD;AACJ;AACA;AACA;;;;WACI,4BAAmB;MAAA;;MACf;MACAE,IAAI,CAACC,gBAAL,CAAsB,OAAtB,EAAgC,UAACC,KAAD,EAAW;QACvC,IAAQC,OAAR,GAAoBD,KAApB,CAAQC,OAAR;;QACA,IAAMC,eAAe,GAAG,KAAI,CAACC,aAAL,CAAmB;UAAEF,OAAO,EAAPA,OAAF;UAAWD,KAAK,EAALA;QAAX,CAAnB,CAAxB;;QACA,IAAIE,eAAJ,EAAqB;UACjBF,KAAK,CAACI,WAAN,CAAkBF,eAAlB;QACH;MACJ,CAND;IAOH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,4BAAmB;MAAA;;MACf;MACAJ,IAAI,CAACC,gBAAL,CAAsB,SAAtB,EAAkC,UAACC,KAAD,EAAW;QACzC,IAAIA,KAAK,CAACK,IAAN,IAAcL,KAAK,CAACK,IAAN,CAAWC,IAAX,KAAoB,YAAtC,EAAoD;UAChD,IAAQC,OAAR,GAAoBP,KAAK,CAACK,IAA1B,CAAQE,OAAR;;UACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;YACvCnB,MAAM,CAACoB,KAAP,iCAA6CJ,OAAO,CAACK,WAArD;UACH;;UACD,IAAMC,eAAe,GAAGC,OAAO,CAACC,GAAR,CAAYR,OAAO,CAACK,WAAR,CAAoBI,GAApB,CAAwB,UAACC,KAAD,EAAW;YACnE,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;cAC3BA,KAAK,GAAG,CAACA,KAAD,CAAR;YACH;;YACD,IAAMhB,OAAO,cAAOiB,OAAP,qBAAkBD,KAAlB,EAAb;;YACA,OAAO,MAAI,CAACd,aAAL,CAAmB;cAAEF,OAAO,EAAPA;YAAF,CAAnB,CAAP,CALmE,CAMnE;YACA;YACA;UACH,CATmC,CAAZ,CAAxB,CALgD,CAc3C;;UACLD,KAAK,CAACmB,SAAN,CAAgBN,eAAhB,EAfgD,CAgBhD;;UACA,IAAIb,KAAK,CAACoB,KAAN,IAAepB,KAAK,CAACoB,KAAN,CAAY,CAAZ,CAAnB,EAAmC;YAC/BP,eAAe,CAACQ,IAAhB,CAAqB;cAAA,OAAMrB,KAAK,CAACoB,KAAN,CAAY,CAAZ,EAAeE,WAAf,CAA2B,IAA3B,CAAN;YAAA,CAArB;UACH;QACJ;MACJ,CAtBD;IAuBH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,6BAAkC;MAAA;;MAAA,IAAlBrB,OAAkB,QAAlBA,OAAkB;MAAA,IAATD,KAAS,QAATA,KAAS;;MAC9B,IAAIQ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;QACvCpB,MAAM,CAACiC,UAAP,CAAkBtB,OAAlB,EAA2BiB,OAA3B,EAAoC;UAChCM,UAAU,EAAE,iBADoB;UAEhCC,SAAS,EAAE,QAFqB;UAGhCC,QAAQ,EAAE,eAHsB;UAIhCC,SAAS,EAAE;QAJqB,CAApC;MAMH;;MACD,IAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAQ5B,OAAO,CAAC2B,GAAhB,EAAqBE,QAAQ,CAACC,IAA9B,CAAZ;;MACA,IAAI,CAACH,GAAG,CAACI,QAAJ,CAAaC,UAAb,CAAwB,MAAxB,CAAL,EAAsC;QAClC,IAAIzB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;UACvCnB,MAAM,CAACoB,KAAP;QACH;;QACD;MACH;;MACD,4BAA0B,KAAKuB,iBAAL,CAAuB;QAAEN,GAAG,EAAHA,GAAF;QAAO3B,OAAO,EAAPA,OAAP;QAAgBD,KAAK,EAALA;MAAhB,CAAvB,CAA1B;MAAA,IAAQmC,MAAR,yBAAQA,MAAR;MAAA,IAAgBC,KAAhB,yBAAgBA,KAAhB;;MACA,IAAIC,OAAO,GAAGD,KAAK,IAAIA,KAAK,CAACC,OAA7B;MACA,IAAMC,aAAa,GAAG,EAAtB;;MACA,IAAI9B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;QACvC,IAAI2B,OAAJ,EAAa;UACTC,aAAa,CAACC,IAAd,CAAmB,0CAC0BH,KAD1B,CAAnB;;UAGA,IAAID,MAAJ,EAAY;YACRG,aAAa,CAACC,IAAd,CAAmB,yDACyCJ,MADzC,CAAnB;UAGH;QACJ;MACJ,CA9B6B,CA+B9B;MACA;;;MACA,IAAI,CAACE,OAAD,IAAY,KAAKG,eAArB,EAAsC;QAClC,IAAIhC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;UACvC4B,aAAa,CAACC,IAAd,CAAmB,4EAAnB;QAEH;;QACDF,OAAO,GAAG,KAAKG,eAAf;MACH;;MACD,IAAI,CAACH,OAAL,EAAc;QACV,IAAI7B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;UACvC;UACA;UACAnB,MAAM,CAACoB,KAAP,+BAAoClB,cAAc,CAACmC,GAAD,CAAlD;QACH;;QACD;MACH;;MACD,IAAIpB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;QACvC;QACA;QACAnB,MAAM,CAACkD,cAAP,oCAAkDhD,cAAc,CAACmC,GAAD,CAAhE;QACAU,aAAa,CAACI,OAAd,CAAsB,UAACC,GAAD,EAAS;UAC3B,IAAIC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;YACpBpD,MAAM,CAACuD,GAAP,OAAAvD,MAAM,qBAAQoD,GAAR,EAAN;UACH,CAFD,MAGK;YACDpD,MAAM,CAACuD,GAAP,CAAWH,GAAX;UACH;QACJ,CAPD;QAQApD,MAAM,CAACwD,QAAP;MACH,CA7D6B,CA8D9B;MACA;;;MACA,IAAI7C,eAAJ;;MACA,IAAI;QACAA,eAAe,GAAGmC,OAAO,CAACW,MAAR,CAAe;UAAEpB,GAAG,EAAHA,GAAF;UAAO3B,OAAO,EAAPA,OAAP;UAAgBD,KAAK,EAALA,KAAhB;UAAuBmC,MAAM,EAANA;QAAvB,CAAf,CAAlB;MACH,CAFD,CAGA,OAAOc,GAAP,EAAY;QACR/C,eAAe,GAAGY,OAAO,CAACoC,MAAR,CAAeD,GAAf,CAAlB;MACH;;MACD,IAAI/C,eAAe,YAAYY,OAA3B,IAAsC,KAAKqC,aAA/C,EAA8D;QAC1DjD,eAAe,GAAGA,eAAe,CAACkD,KAAhB,CAAsB,UAACH,GAAD,EAAS;UAC7C,IAAIzC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;YACvC;YACA;YACAnB,MAAM,CAACkD,cAAP,CAAsB,iDACdhD,cAAc,CAACmC,GAAD,CADA,qCAAtB;YAEArC,MAAM,CAAC8D,KAAP,qBAAiCjB,KAAjC;YACA7C,MAAM,CAAC8D,KAAP,CAAaJ,GAAb;YACA1D,MAAM,CAACwD,QAAP;UACH;;UACD,OAAO,MAAI,CAACI,aAAL,CAAmBH,MAAnB,CAA0B;YAAEpB,GAAG,EAAHA,GAAF;YAAO3B,OAAO,EAAPA,OAAP;YAAgBD,KAAK,EAALA;UAAhB,CAA1B,CAAP;QACH,CAXiB,CAAlB;MAYH;;MACD,OAAOE,eAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,kCAA2C;MAAA,IAAvB0B,GAAuB,SAAvBA,GAAuB;MAAA,IAAlB3B,OAAkB,SAAlBA,OAAkB;MAAA,IAATD,KAAS,SAATA,KAAS;;MACvC,IAAIQ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;QACvCpB,MAAM,CAACiC,UAAP,CAAkBK,GAAlB,EAAuBC,GAAvB,EAA4B;UACxBL,UAAU,EAAE,iBADY;UAExBC,SAAS,EAAE,QAFa;UAGxBC,QAAQ,EAAE,mBAHc;UAIxBC,SAAS,EAAE;QAJa,CAA5B;QAMArC,MAAM,CAACiC,UAAP,CAAkBtB,OAAlB,EAA2BiB,OAA3B,EAAoC;UAChCM,UAAU,EAAE,iBADoB;UAEhCC,SAAS,EAAE,QAFqB;UAGhCC,QAAQ,EAAE,mBAHsB;UAIhCC,SAAS,EAAE;QAJqB,CAApC;MAMH;;MACD,IAAM2B,MAAM,GAAG,KAAK1D,OAAL,CAAa2D,GAAb,CAAiBtD,OAAO,CAACuD,MAAzB,KAAoC,EAAnD;;MAfuC,2CAgBnBF,MAhBmB;MAAA;;MAAA;QAgBvC,oDAA4B;UAAA,IAAjBlB,KAAiB;UACxB,IAAID,MAAM,SAAV;UACA,IAAMsB,WAAW,GAAGrB,KAAK,CAACsB,KAAN,CAAY;YAAE9B,GAAG,EAAHA,GAAF;YAAO3B,OAAO,EAAPA,OAAP;YAAgBD,KAAK,EAALA;UAAhB,CAAZ,CAApB;;UACA,IAAIyD,WAAJ,EAAiB;YACb;YACAtB,MAAM,GAAGsB,WAAT;;YACA,IAAIb,KAAK,CAACC,OAAN,CAAcY,WAAd,KAA8BA,WAAW,CAACE,MAAZ,KAAuB,CAAzD,EAA4D;cACxD;cACAxB,MAAM,GAAGyB,SAAT;YACH,CAHD,MAIK,IAAKH,WAAW,CAACI,WAAZ,KAA4BC,MAA5B,IACNA,MAAM,CAACC,IAAP,CAAYN,WAAZ,EAAyBE,MAAzB,KAAoC,CADnC,EACuC;cACxC;cACAxB,MAAM,GAAGyB,SAAT;YACH,CAJI,MAKA,IAAI,OAAOH,WAAP,KAAuB,SAA3B,EAAsC;cACvC;cACA;cACA;cACAtB,MAAM,GAAGyB,SAAT;YACH,CAjBY,CAkBb;;;YACA,OAAO;cAAExB,KAAK,EAALA,KAAF;cAASD,MAAM,EAANA;YAAT,CAAP;UACH;QACJ,CAxCsC,CAyCvC;;MAzCuC;QAAA;MAAA;QAAA;MAAA;;MA0CvC,OAAO,EAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,2BAAkBE,OAAlB,EAA2B;MACvB,KAAKG,eAAL,GAAuB9C,gBAAgB,CAAC2C,OAAD,CAAvC;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,yBAAgBA,OAAhB,EAAyB;MACrB,KAAKc,aAAL,GAAqBzD,gBAAgB,CAAC2C,OAAD,CAArC;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,uBAAcD,KAAd,EAAqB;MACjB,IAAI5B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;QACvCpB,MAAM,CAAC0E,MAAP,CAAc5B,KAAd,EAAqB,QAArB,EAA+B;UAC3BZ,UAAU,EAAE,iBADe;UAE3BC,SAAS,EAAE,QAFgB;UAG3BC,QAAQ,EAAE,eAHiB;UAI3BC,SAAS,EAAE;QAJgB,CAA/B;QAMArC,MAAM,CAAC2E,SAAP,CAAiB7B,KAAjB,EAAwB,OAAxB,EAAiC;UAC7BZ,UAAU,EAAE,iBADiB;UAE7BC,SAAS,EAAE,QAFkB;UAG7BC,QAAQ,EAAE,eAHmB;UAI7BC,SAAS,EAAE;QAJkB,CAAjC;QAMArC,MAAM,CAAC0E,MAAP,CAAc5B,KAAK,CAACC,OAApB,EAA6B,QAA7B,EAAuC;UACnCb,UAAU,EAAE,iBADuB;UAEnCC,SAAS,EAAE,QAFwB;UAGnCC,QAAQ,EAAE,eAHyB;UAInCC,SAAS,EAAE;QAJwB,CAAvC;QAMArC,MAAM,CAAC2E,SAAP,CAAiB7B,KAAK,CAACC,OAAvB,EAAgC,QAAhC,EAA0C;UACtCb,UAAU,EAAE,iBAD0B;UAEtCC,SAAS,EAAE,QAF2B;UAGtCC,QAAQ,EAAE,eAH4B;UAItCC,SAAS,EAAE;QAJ2B,CAA1C;QAMArC,MAAM,CAAC0E,MAAP,CAAc5B,KAAK,CAACoB,MAApB,EAA4B,QAA5B,EAAsC;UAClChC,UAAU,EAAE,iBADsB;UAElCC,SAAS,EAAE,QAFuB;UAGlCC,QAAQ,EAAE,eAHwB;UAIlCC,SAAS,EAAE;QAJuB,CAAtC;MAMH;;MACD,IAAI,CAAC,KAAK/B,OAAL,CAAasE,GAAb,CAAiB9B,KAAK,CAACoB,MAAvB,CAAL,EAAqC;QACjC,KAAK5D,OAAL,CAAauE,GAAb,CAAiB/B,KAAK,CAACoB,MAAvB,EAA+B,EAA/B;MACH,CAnCgB,CAoCjB;MACA;;;MACA,KAAK5D,OAAL,CAAa2D,GAAb,CAAiBnB,KAAK,CAACoB,MAAvB,EAA+BjB,IAA/B,CAAoCH,KAApC;IACH;IACD;AACJ;AACA;AACA;AACA;;;;WACI,yBAAgBA,KAAhB,EAAuB;MACnB,IAAI,CAAC,KAAKxC,OAAL,CAAasE,GAAb,CAAiB9B,KAAK,CAACoB,MAAvB,CAAL,EAAqC;QACjC,MAAM,IAAIhE,YAAJ,CAAiB,4CAAjB,EAA+D;UACjEgE,MAAM,EAAEpB,KAAK,CAACoB;QADmD,CAA/D,CAAN;MAGH;;MACD,IAAMY,UAAU,GAAG,KAAKxE,OAAL,CAAa2D,GAAb,CAAiBnB,KAAK,CAACoB,MAAvB,EAA+Ba,OAA/B,CAAuCjC,KAAvC,CAAnB;;MACA,IAAIgC,UAAU,GAAG,CAAC,CAAlB,EAAqB;QACjB,KAAKxE,OAAL,CAAa2D,GAAb,CAAiBnB,KAAK,CAACoB,MAAvB,EAA+Bc,MAA/B,CAAsCF,UAAtC,EAAkD,CAAlD;MACH,CAFD,MAGK;QACD,MAAM,IAAI5E,YAAJ,CAAiB,uCAAjB,CAAN;MACH;IACJ;;;;;;AAEL,SAASG,MAAT"},"metadata":{},"sourceType":"module"}