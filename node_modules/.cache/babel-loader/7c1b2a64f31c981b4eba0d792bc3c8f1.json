{"ast":null,"code":"import _regeneratorRuntime from \"/home/tanishq-singh-2301/hello/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/home/tanishq-singh-2301/hello/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/home/tanishq-singh-2301/hello/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/tanishq-singh-2301/hello/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tanishq-singh-2301/hello/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network}\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\n\nvar CacheFirst = /*#__PURE__*/function () {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link module:workbox-core.cacheNames}.\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} options.fetchOptions Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of all fetch() requests made by this strategy.\n   * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   */\n  function CacheFirst() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, CacheFirst);\n\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n    this._plugins = options.plugins || [];\n    this._fetchOptions = options.fetchOptions;\n    this._matchOptions = options.matchOptions;\n  }\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link module:workbox-routing.Router}.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request A request to run this strategy for.\n   * @param {Event} [options.event] The event that triggered the request.\n   * @return {Promise<Response>}\n   */\n\n\n  _createClass(CacheFirst, [{\n    key: \"handle\",\n    value: function () {\n      var _handle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n        var event, request, logs, response, error, _iterator, _step, log;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event = _ref.event, request = _ref.request;\n                logs = [];\n\n                if (typeof request === 'string') {\n                  request = new Request(request);\n                }\n\n                if (process.env.NODE_ENV !== 'production') {\n                  assert.isInstance(request, Request, {\n                    moduleName: 'workbox-strategies',\n                    className: 'CacheFirst',\n                    funcName: 'makeRequest',\n                    paramName: 'request'\n                  });\n                }\n\n                _context.next = 6;\n                return cacheWrapper.match({\n                  cacheName: this._cacheName,\n                  request: request,\n                  event: event,\n                  matchOptions: this._matchOptions,\n                  plugins: this._plugins\n                });\n\n              case 6:\n                response = _context.sent;\n\n                if (response) {\n                  _context.next = 21;\n                  break;\n                }\n\n                if (process.env.NODE_ENV !== 'production') {\n                  logs.push(\"No response found in the '\".concat(this._cacheName, \"' cache. \") + \"Will respond with a network request.\");\n                }\n\n                _context.prev = 9;\n                _context.next = 12;\n                return this._getFromNetwork(request, event);\n\n              case 12:\n                response = _context.sent;\n                _context.next = 18;\n                break;\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](9);\n                error = _context.t0;\n\n              case 18:\n                if (process.env.NODE_ENV !== 'production') {\n                  if (response) {\n                    logs.push(\"Got response from network.\");\n                  } else {\n                    logs.push(\"Unable to get a response from the network.\");\n                  }\n                }\n\n                _context.next = 22;\n                break;\n\n              case 21:\n                if (process.env.NODE_ENV !== 'production') {\n                  logs.push(\"Found a cached response in the '\".concat(this._cacheName, \"' cache.\"));\n                }\n\n              case 22:\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.groupCollapsed(messages.strategyStart('CacheFirst', request));\n                  _iterator = _createForOfIteratorHelper(logs);\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      log = _step.value;\n                      logger.log(log);\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n\n                  messages.printFinalResponse(response);\n                  logger.groupEnd();\n                }\n\n                if (response) {\n                  _context.next = 25;\n                  break;\n                }\n\n                throw new WorkboxError('no-response', {\n                  url: request.url,\n                  error: error\n                });\n\n              case 25:\n                return _context.abrupt(\"return\", response);\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[9, 15]]);\n      }));\n\n      function handle(_x) {\n        return _handle.apply(this, arguments);\n      }\n\n      return handle;\n    }()\n    /**\n     * Handles the network and cache part of CacheFirst.\n     *\n     * @param {Request} request\n     * @param {Event} [event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_getFromNetwork\",\n    value: function () {\n      var _getFromNetwork2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(request, event) {\n        var response, responseClone, cachePutPromise;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return fetchWrapper.fetch({\n                  request: request,\n                  event: event,\n                  fetchOptions: this._fetchOptions,\n                  plugins: this._plugins\n                });\n\n              case 2:\n                response = _context2.sent;\n                // Keep the service worker while we put the request to the cache\n                responseClone = response.clone();\n                cachePutPromise = cacheWrapper.put({\n                  cacheName: this._cacheName,\n                  request: request,\n                  response: responseClone,\n                  event: event,\n                  plugins: this._plugins\n                });\n\n                if (event) {\n                  try {\n                    event.waitUntil(cachePutPromise);\n                  } catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                      logger.warn(\"Unable to ensure service worker stays alive when \" + \"updating cache for '\".concat(getFriendlyURL(request.url), \"'.\"));\n                    }\n                  }\n                }\n\n                return _context2.abrupt(\"return\", response);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _getFromNetwork(_x2, _x3) {\n        return _getFromNetwork2.apply(this, arguments);\n      }\n\n      return _getFromNetwork;\n    }()\n  }]);\n\n  return CacheFirst;\n}();\n\nexport { CacheFirst };","map":{"version":3,"names":["assert","cacheNames","cacheWrapper","fetchWrapper","getFriendlyURL","logger","WorkboxError","messages","CacheFirst","options","_cacheName","getRuntimeName","cacheName","_plugins","plugins","_fetchOptions","fetchOptions","_matchOptions","matchOptions","event","request","logs","Request","process","env","NODE_ENV","isInstance","moduleName","className","funcName","paramName","match","response","push","_getFromNetwork","error","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url","fetch","responseClone","clone","cachePutPromise","put","waitUntil","warn"],"sources":["/home/tanishq-singh-2301/hello/node_modules/workbox-strategies/CacheFirst.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network}\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass CacheFirst {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        this._plugins = options.plugins || [];\n        this._fetchOptions = options.fetchOptions;\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        const logs = [];\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'CacheFirst',\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        let response = await cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n        let error;\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this._cacheName}' cache. ` +\n                    `Will respond with a network request.`);\n            }\n            try {\n                response = await this._getFromNetwork(request, event);\n            }\n            catch (err) {\n                error = err;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Got response from network.`);\n                }\n                else {\n                    logs.push(`Unable to get a response from the network.`);\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this._cacheName}' cache.`);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('CacheFirst', request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n    /**\n     * Handles the network and cache part of CacheFirst.\n     *\n     * @param {Request} request\n     * @param {Event} [event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getFromNetwork(request, event) {\n        const response = await fetchWrapper.fetch({\n            request,\n            event,\n            fetchOptions: this._fetchOptions,\n            plugins: this._plugins,\n        });\n        // Keep the service worker while we put the request to the cache\n        const responseClone = response.clone();\n        const cachePutPromise = cacheWrapper.put({\n            cacheName: this._cacheName,\n            request,\n            response: responseClone,\n            event,\n            plugins: this._plugins,\n        });\n        if (event) {\n            try {\n                event.waitUntil(cachePutPromise);\n            }\n            catch (error) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.warn(`Unable to ensure service worker stays alive when ` +\n                        `updating cache for '${getFriendlyURL(request.url)}'.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { CacheFirst };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}